// Code generated by MockGen. DO NOT EDIT.
// Source: repository/main.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	types "falcon/database/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserI is a mock of UserI interface.
type MockUserI struct {
	ctrl     *gomock.Controller
	recorder *MockUserIMockRecorder
}

// MockUserIMockRecorder is the mock recorder for MockUserI.
type MockUserIMockRecorder struct {
	mock *MockUserI
}

// NewMockUserI creates a new mock instance.
func NewMockUserI(ctrl *gomock.Controller) *MockUserI {
	mock := &MockUserI{ctrl: ctrl}
	mock.recorder = &MockUserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserI) EXPECT() *MockUserIMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserI) CreateUser(arg0 *types.UserRegister) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserI)(nil).CreateUser), arg0)
}

// GetByEmail mocks base method.
func (m *MockUserI) GetByEmail(email string) (*types.UserAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*types.UserAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserIMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserI)(nil).GetByEmail), email)
}

// GetById mocks base method.
func (m *MockUserI) GetById(userId int) (*types.UserAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId)
	ret0, _ := ret[0].(*types.UserAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserIMockRecorder) GetById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserI)(nil).GetById), userId)
}
